//@version=5
strategy("Daily One Trade Strategy", overlay=true, default_qty_type=strategy.fixed)

// Risk amount in dollars
risk_per_trade = 30.0

// Calculate SMAs on the current timeframe
sma20 = ta.sma(close, 20)
sma200 = ta.sma(close, 200)

// Retrieve the 20-period SMA and 14-period ATR from the daily timeframe
sma20_daily = request.security(syminfo.tickerid, "D", ta.sma(close, 20))
atr14_daily = request.security(syminfo.tickerid, "D", ta.atr(14))

// Retrieve the last available daily closing price (skipping non-trading days like weekends)
previous_day_close = request.security(syminfo.tickerid, "D", close[1])

// Define entry condition with the requirement that price is above the last daily close
bullish_candle = close > open
// Condition to limit entry to only the first hour of the market (9:30 to 10:30 AM)
first_hour = (hour == 9 and minute >= 30) or (hour == 10 and minute < 30)

// Calculate body length and upper wick length
body_length = math.abs(close - open)
upper_wick = high - math.max(close, open)
upper_wick_condition = upper_wick <= (0.25 * body_length)  // Top wick should be no more than 25% of the body

// Initialize variables for tracking consecutive red candles and the flag
var int consecutive_reds = 0
var bool red_candle_condition_met = false

// Check if a new day has started
new_day = (dayofweek != dayofweek[1])

if (new_day)
    consecutive_reds := 0  // Reset counter at the start of a new day
    red_candle_condition_met := false  // Reset flag at the start of a new day

// Update consecutive red candles counter
if (close < open)
    consecutive_reds += 1
else
    consecutive_reds := 0

// Set the flag if more than two consecutive red candles are detected
if (consecutive_reds > 2)
    red_candle_condition_met := true

// New condition: current price should be above the maximum of the previous candle's close or open
above_prev_max = close > math.max(close[1], open[1])

// Entry condition: ensure the red candle condition has not been met and price is above the maximum of previous close or open
entry_condition = close > sma20 and sma20 > sma200 and close > sma20_daily and close > previous_day_close and bullish_candle and first_hour and upper_wick_condition and not red_candle_condition_met and above_prev_max

// Initialize variables for stop loss, take profit, and trade tracking
var float stop_loss = na
var float take_profit = na
var int last_trade_day = na

if (new_day)
    last_trade_day := na  // Reset last trade day at the start of a new day

if (entry_condition and na(last_trade_day))
    // Set stop loss at the low of the entry candle
    stop_loss := low
    // Calculate position size based on risk per trade
    price_difference = close - stop_loss
    if (price_difference > 0)
        position_size = risk_per_trade / price_difference
        // Enter a long position with calculated position size
        strategy.entry("Long", strategy.long, qty=position_size)
    // Set take profit at 60% of the daily ATR above the entry price
    take_profit := close + 0.5 * atr14_daily
    // Record the day of the trade
    last_trade_day := dayofweek

// Exit conditions
if (strategy.position_size > 0)
    // Exit at stop loss
    if (close <= stop_loss)
        strategy.exit("Stop Loss", from_entry="Long", stop=stop_loss)
    // Exit at take profit
    else if (high >= take_profit)
        strategy.exit("Take Profit", from_entry="Long", limit=take_profit)
    // Time-based exit at the end of the day
    else if (hour >= 15 and minute >= 50)
        strategy.close("Long", "End of the day")

// Plot indicators
plot(sma20, title="SMA 20", color=color.blue, linewidth=1)
plot(sma200, title="SMA 200", color=color.orange, linewidth=1)
plot(previous_day_close, title="Previous Day Close", color=color.purple, linewidth=1, style=plot.style_stepline)

// Plot stop loss and take profit levels only when a position is active
plot(series=strategy.position_size > 0 ? stop_loss : na, title="Stop Loss", color=color.red, linewidth=2, style=plot.style_linebr)
plot(series=strategy.position_size > 0 ? take_profit : na, title="Take Profit", color=color.green, linewidth=2, style=plot.style_linebr)
